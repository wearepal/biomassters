[tool.poetry]
name = "biomassters"
version = "0.0.1"
description = ""
authors = ["wearepal"]
license = "MIT"
packages = [
  { include = "src" },
  { include = "hydra_plugins" },
]
classifiers=[
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Operating System :: OS Independent",
  "Typing :: Typed",
]
keywords=["biomassters", "satellite-imagery", "competition"]
repository=""
readme="README.md"

# By default, dependencies across all non-optional groups will be installed when executing poetry install.
# If you only want to install the default, non-grouped dependencies (aka the main group), you can 
# do so with the --only option: ``poetry install --only main``. Equally, you can exclude one or 
# more groups with the --without option: ``poetry install --without torch``.
[tool.poetry.dependencies]
ftfy = "^6.1.1"
python = ">=3.9.11,<3.11"
regex = "^2022.1.18"
setuptools = "59.5.0" # for pytorch-lightning
wrapt = "<1.14,>=1.11"

[tool.poetry.group.misc.dependencies]
ranzen = { version = ">=2.0.6" }
torch-conduit = { git = "https://github.com/wearepal/conduit.git", branch = "main" }

[tool.poetry.group.config.dependencies]
hydra-core = { version = "^1.2.0" }
neoconfigen = ">=2.3.3"

[tool.poetry.group.data.dependencies]
albumentations = "^1.3.0"
torchgeo = "^0.3.1"
joblib = "1.2.0"

[tool.poetry.group.torch.dependencies]
numpy = { version = "^1.21.4" }
pytorch-lightning = "^1.8.6"
rich = "^13.0.0"
torch = ">=1.12.1"

[tool.poetry.group.logging.dependencies]
loguru = "*"
wandb = "*"

[tool.poetry.group.models.dependencies]
# timm = { git = "https://github.com/rwightman/pytorch-image-models", branch = "main" }
transformers = "^4.20.1"
segmentation-models-pytorch = "^0.3.1"
einops = "^0.4"
einops-exts = "^0.0.4"
rotary-embedding-torch = "^0.2.1"

[tool.poetry.group.fsdp]
optional = true

[tool.poetry.group.fsdp.dependencies]
fairscale = "^0.4.5"

[tool.poetry.group.deepspeed]
optional = true

[tool.poetry.group.deepspeed.dependencies]
deepspeed = "*"
triton = "*"

[tool.poetry.group.dev.dependencies]
black = "*"
darglint = "^1.8.0"
isort = "*"
pandas-stubs = "*"
pytest = "*"
ruff = "^0.0.209"
types-tqdm = "*"

[tool.pyright]
exclude = ["**/node_modules", "**/__pycache__", "**/.**"]
typeCheckingMode = "basic"
pythonVersion = "3.10"
reportUnusedImport = "error"
reportDuplicateImport  = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportUntypedNamedTuple = "error"
reportConstantRedefinition = "warning"
reportMissingImports = "error"
reportMissingTypeStubs = "warning"
strictListInference = true
strictSetInference = true
strictParameterNoneValue = true

[tool.black]
line-length = 100
target-version = ['py37']

[tool.isort]
known_third_party = [
  "black",
  "hydra",
  "matplotlib",
  "mypy",
  "numpy",
  "omegaconf",
  "pandas",
  "pylint",
  "pytest",
  "scipy",
  "setuptools",
  "sklearn",
  "torch",
  "tqdm",
  "wandb",
]
known_future_library = []
extra_standard_library = ["dataclasses", "__future__"]
line_length = 88
profile = "black"
force_sort_within_sections = "True"
classes = ["MISSING"]

[tool.ruff]
line-length = 100
select = [
    "D", # pydocstyle
    "E", # pycodestyle
    "F", # pyflakes
    # "I", # isort
    # "UP", # pyupgrade
    # "PDV", # pandas-vet
    # "ANN", # flake8-annotations
]
ignore = [
    "D105", # magic methods
    "D107", # __init__
    "D203",
    "D208", # over indentation
    "D212",
    "D213",
    "D214",
    "D215",
    "D404",
    "D405",
    "D406",
    "D407",
    "D408",
    "D409",
    "D410",
    "D411",
    "D413",
    "D415",
    "D416",
    "D417",
    "TID252", # relative imports
    "PD901", # forbidding "df" as a variable name
    "ANN101",
    "ANN102",
]
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F403"]

[tool.ruff.isort]
known-third-party = ["PIL", "black", "git", "fairlearn", "matplotlib", "mypy", "numpy", "pandas", "pylint", "pytest", "scipy", "seaborn", "setuptools", "sklearn", "teext", "torch"]
extra-standard-library = ["__future__", "typing_extensions"]

[tool.ruff.flake8-annotations]
mypy-init-return = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

